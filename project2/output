java -cp ./antlr-4.12.0-complete.jar:. testParser test.c
type: INT
type: FLOAT
type: INT
declarations: 
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: >
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
if_then_statements: statement
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: !=
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
if_then_statements: statement
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: ==
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
if_then_statements: statement
else_statements: ELSE if_then_statements
statement: IF '(' arith_expression ')' if_then_statements else_statements
if_then_statements: statement
else_statements: ELSE if_then_statements
statement: IF '(' arith_expression ')' if_then_statements else_statements
if_then_statements: statement
else_statements: ELSE if_then_statements
statement: IF '(' arith_expression ')' if_then_statements else_statements
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statements: 
switch_statement: statements
primaryExpr: Floating_point_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statement: break;
statements: 
statements: statement statements
statements: statement statements
switch_statement: statements
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
switch_statement: statements
primaryExpr: Floating_point_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
switch_statement: statements
switch_statements: (CASE (Integer_constant|Floating_point_constant):switch_statement) switch_statements
switch_statements: DEFAULT : switch_statement switch_statements
switch_statements: (CASE (Integer_constant|Floating_point_constant):switch_statement) switch_statements
switch_statements: (CASE (Integer_constant|Floating_point_constant):switch_statement) switch_statements
statement: SWITCH(arith_expression){switch_statements}
statements: 
statements: statement statements
statements: statement statements
statements: statement statements
program: VOID MAIN () {declarations statements}
headers: program
java -cp ./antlr-4.12.0-complete.jar:. testParser test2.c
type: INT
type: FLOAT
declarations: 
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
if_then_statements: statement
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: <
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statement: DO if_then_statements WHILE ( arith_expression )
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
statement: WHILE '(' arith_expression ')' if_then_statements
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
statement: FOR(variable = arith_expression ; arith_expression ; variable = arith_expression ) if_then_statements
statements: 
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
program: VOID MAIN () {declarations statements}
headers: program
java -cp ./antlr-4.12.0-complete.jar:. testParser test3.c
type: INT
type: INT
type: INT
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statement: return ;
statements: 
statements: statement statements
if_then_statements: {statements}
function: (VOID|type) Identifier ( type Identifier (, type Identifier)*) if_then_statements}
type: INT
type: FLOAT
type: INT
type: CHAR
type: CHAR
declarations: 
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
declarations: type Identifier ; declarations ('[' Integer_constant ']')?
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '+=' arith_expression
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '-=' arith_expression
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '*=' arith_expression
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '/=' arith_expression
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '%=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: >
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: <
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: ==
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: !=
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: <=
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: >=
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
assign_statement: ++
statement: variable assign_statement;
assign_statement: --
statement: variable assign_statement;
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: <
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: ++
assign_statement: ++
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
statement: FOR(variable = arith_expression ; arith_expression ; variable = arith_expression ) if_then_statements
primaryExpr: CHARACTER
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: CHARACTER
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: STRING
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statement: break;
statement: continue;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statement: PRINTF ( STRING (, arith_expression)* );
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statement: PRINTF ( STRING (, arith_expression)* );
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
statement: PRINTF ( STRING (, arith_expression)* );
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: >
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: (arith_expression)
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: ==
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
primaryExpr: variable
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: >
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: ++
statement: variable assign_statement;
if_then_statements: statement
statement: WHILE '(' arith_expression ')' if_then_statements
statements: 
statements: statement statements
statements: statement statements
if_then_statements: {statements}
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
comp: ==
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
primaryExpr: variable
signExpr: primaryExpr
primaryExpr: Integer_constant
signExpr: primaryExpr
multExpr: signExpr( '*' signExpr| '/' signExpr)*
addExpr: multExpr( '+' multExpr| '-' multExpr)*
arith_expression: addExpr comp addExpr
assign_statement: '=' arith_expression
statement: variable assign_statement;
statements: 
statements: statement statements
if_then_statements: {statements}
else_statements: 
statement: IF '(' arith_expression ')' if_then_statements else_statements
if_then_statements: statement
else_statements: ELSE if_then_statements
statement: IF '(' arith_expression ')' if_then_statements else_statements
if_then_statements: statement
else_statements: ELSE if_then_statements
statement: IF '(' arith_expression ')' if_then_statements else_statements
statement: return ;
statements: 
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
statements: statement statements
program: VOID MAIN () {declarations statements}
headers: program
headers: INCLUDE STD_LIB headers
headers: INCLUDE STD_LIB headers
